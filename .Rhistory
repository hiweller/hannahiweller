blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::check_site()
blogdown::stop_server()
blogdown::check_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
grDevices::rgb2hsv(255, 74, 171)
grDevices::rgb2hsv(255, 74, 171) * 255
rgb2hsv(255, 74, 171) * 255
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::serve_site()
blogdown::stop_server()
View(clusters)
plot(rc)
library(recolorize)
plot(rc)
blogdown::serve_site()
devtools::install_github("rstudio/blogdown")
blogdown::check_site()
blogdown::check_gitignore()
blogdown::stop_server()
library(recolorize)
img <- system.file("extdata/chongi.png", package = "recolorize")
test <- recolorize2(img, "k", n = 8)
test <- recolorize2(img, "hist", n = 8)
blogdown:::preview_site()
image_tree_save <- function(filename, ...) {
pdf(filename)}
image_tree_save <- function(filename, w, h, ...) {
png(filename, width = w, height = h, bg = "transparent", units = 'in', res = 300)
image_tree(...)
dev.off()}
image_tree_save("cdm_tree.png", 10, 3, tree = tree, image_paths = images)
#' @param tree Object of class "phylo".
#' @param image_paths Vector of paths to images for plotting.
#'   Must be in the same order as the tree tip labels!!
#' @param image_width The width of the image, as a proportion of the
#'   x-axis.
#' @param ... Arguments passed to [ape::plot.phylo], including
#'   `type` (`"fan", "unrooted", "phylogram"`, etc), `show.tip.label`
#'   (logical), etc.
image_tree <- function(tree, image_paths, image_width = 0.1, ...) {
require(ape)
# plot the tree
plot.phylo(tree, ...)
# this is the weird part: we get the phylo plot parameters from the active
# graphics device
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
# get the xy coordinates of the tips
ntip <- lastPP$Ntip
xy <- data.frame(x = lastPP$xx[1:ntip],
y = lastPP$yy[1:ntip])
# scale image width according to plot width
image_width <- diff(range(lastPP$x.lim)) * image_width
# add the images using the add_image function
for (i in 1:length(image_paths)) {
img <- recolorize::readImage(image_paths[i])
add_image(img,
xy[i, 1], xy[i, 2],
width = image_width)
}
}
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE,
angle = 0){
usr <- graphics::par()$usr
pin <- graphics::par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate,
angle = angle)
}
image_tree_save("cdm_tree.png", 10, 3, tree = tree, image_paths = images)
# in my case, I have a folder called 'images' which contains the 40 images,
# so 'images' is a vector of 40 paths
images <- dir("images/", full.names = TRUE)
# generate a distance matrix using all the package defaults
cdm <- imageClusterPipeline(images, sample.size = FALSE)
library(colordistance)
# in my case, I have a folder called 'images' which contains the 40 images,
# so 'images' is a vector of 40 paths
images <- dir("images/", full.names = TRUE)
# generate a distance matrix using all the package defaults
cdm <- imageClusterPipeline(images, sample.size = FALSE)
tree <- ape::nj(as.dist(cdm))
cdm <- imageClusterPipeline(images, sample.size = FALSE, plot.heatmap = F)
images
cdm <- imageClusterPipeline(images, sample.size = FALSE, plot.heatmap = F)
install.packages("blogdown")
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/")
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
library(recolorize)
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
wasps
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
pattern = "jpg",
full.names = TRUE)
wasps
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
library(recolorize)
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
pattern = "jpg",
full.names = TRUE)
wasps
layout(matrix(1:20, nrow = 4))
par(mar = rep(0.5, 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
?patternize::alignLan
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt")
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt",
col.names = c(X, Y))
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt",
col.names = c("X", "Y"))
blogdown:::preview_site()
# first, make a blank plot
PCx <- 1; PCy <- 2
pca_summary <- summary(wasp_pca)
blogdown:::preview_site()
# get a dataframe of all colors:
all_palettes <- do.call(rbind, lapply(rc_list, function(i) i$centers))
blogdown::build_site()
blogdown:::preview_site()
img <- imager::load.image(image_paths[3])
# and make a list of image paths
image_paths <- dir(".", "beetle_")
current_resolutions <- c(200/35, 400/35, 600/35)
target_resolution <- 200/35
rescaling_factors <- target_resolution / current_resolutions
print(rescaling_factors)
# make an empty list for images
image_list <- vector("list", length = length(image_paths))
# read in images and rescale appropriately
for (i in 1:length(image_paths)) {
image_list[[i]] <- readImage(image_paths[i], resize = rescaling_factors[i])
}
library(recolorize)
# read in images and rescale appropriately
for (i in 1:length(image_paths)) {
image_list[[i]] <- readImage(image_paths[i], resize = rescaling_factors[i])
}
lapply(image_list, dim)
img <- imager::load.image(image_paths[3])
img <- imager::imresize(img, scale = 1/3, interpolation = 5)
img <- imager::load.image(image_paths[3])
img <- imager::resize(img, size_x = 90, size_y = 226)
dim(img)
library(imager)
plot(img)
img <- imager::load.image(image_paths[3])
# img <- imager::imresize(img, scale = 1/3, interpolation = 5)
img <- imager::resize(img, size_x = 90, size_y = 226)
# img <- imager::imresize(img, scale = 1/3, interpolation = 5)
img <- imager::resize(img, size_x = 90)
dim(img)
img <- imager::load.image(image_paths[3])
# img <- imager::imresize(img, scale = 1/3, interpolation = 5)
img <- imager::resize(img, size_x = 90)
dim(img)
678 * 1/3
# get image path
image_path <- system.file("extdata/chongi.png", package = "recolorize")
# load recolorize
library(recolorize)
# read in image at 1x, 2x, and 3x
sample_images <- lapply(1:3, function(i) readImage(image_path, resize = i))
dim(sample_images[[3]])
class(img)
dim(img)
dim(img)[1:2] * 1/3
# load the image as a cimg object
img <- imager::load.image(image_paths[3])
dim(img)[1:2] * 1/3
new_dimensions <- dim(img)[1:2] * 1/3
# this doesn't work:
img_imresize <- imager::imresize(img, scale = 1/3)
dim(img_imresize)
# we can explicitly calculate image dimensions:
new_dimensions <- dim(img)[1:2] * 1/3
new_dimensions
# we can explicitly calculate image dimensions:
new_dimensions <- dim(img)[1:2] * 1/3
#
img_resize <- imager::resize(img, size_x = new_dimensions[1], size_y = new_dimensions[2])
dim(img)
dim(img_resize)
plot(img_resize)
library(imager)
# then write:
imager::save.image(img_resize, file = "beetle_3_resized.png", quality = 1)
?imager::save.image
# or we can use a non-exported recolorize function to turn it back into an array:
img_array <- recolorize:::cimg_to_array(img_resize)
library(imager)
# load the image as a cimg object
img <- load.image(image_paths[3])
# this doesn't work (this is the function recolorize calls):
img_imresize <- imresize(img, scale = 1/3)
dim(img_imresize) # cimg objects have x and y flipped, but this is still 223 pixels long x 89 pixels wide
# we can explicitly calculate image dimensions:
new_dimensions <- dim(img)[1:2] * 1/3
# and specify those dimensions directly:
img_resize <- resize(img,
size_x = new_dimensions[1],
size_y = new_dimensions[2])
dim(img_resize)
5.71-5.63
images <- dir(system.file("extdata", package = "recolorize"),
"png", full.names = TRUE)
filename <- basename(tools::file_path_sans_ext(images[i]))
filename
new_image <- load.image(images[i])
dim(new_image)
image_paths
blogdown:::preview_site()
# make an empty list for images
image_list <- vector("list", length = length(image_paths))
setNames(image_list) <- basename(image_paths)
# make an empty list for images
image_list <- vector("list", length = length(image_paths))
image_list <- setNames(image_list, basename(image_paths))
# read in images and rescale appropriately
for (i in 1:length(image_paths)) {
image_list[[i]] <- recolorize::readImage(image_paths[i],
resize = rescaling_factors[i])
}
install.packages("blogdown")
try blogdown::install_hugo("0.82.0")
blogdown::install_hugo("0.82.0")
blogdown::serve_site()
library(recolorize)
wasps <- dir("~/Dropbox/color/recolorize_examples/02_wasps/original_images/",
pattern = "jpg",
full.names = TRUE)
layout(matrix(1:20, nrow = 4))
par(mar = rep(0, 4))
for (i in wasps) {
plotImageArray(readImage(i, resize = 0.5))
}
library(recolorize)
imgs <- dir("~/Dropbox/color/recolorize_MS/old/wasp_faces/", full.names = TRUE)
layout(matrix(1:20, nrow = 4))
par(mar = rep(0, 4))
for (i in imgs) {
plotImageArray(readImage(i, resize = 0.5))
}
layout(matrix(1:20, nrow = 4))
par(mar = rep(0.5, 4))
for (i in imgs) {
rc <- recolorize(i, method = "k", n = 3, plotting = FALSE, resize = 0.25)
plotColorPalette(rc$centers)
}
rc_list <- readRDS("~/Dropbox/color/recolorize_examples/02_wasps/rds_files/recolorize_fits.rds")
# make an empty list for storing the recolorize objects
rc_list <- vector("list", length(imgs))
names(rc_list) <- names(imgs)
# for every image, run the same recolorize2 function to fit a recolorize object:
for (i in 1:length(imgs)) {
rc_list[[i]] <- recolorize2(imgs[[i]], bins = 3,
cutoff = 35, plotting = FALSE)
}
# get a dataframe of all colors:
all_palettes <- do.call(rbind, lapply(rc_list, function(i) i$centers))
# and for cluster sizes (as a proportion of their original image):
all_sizes <- do.call(c, lapply(rc_list, function(i) i$sizes))
# plot colors using hclust and return grouping list:
par(mar = rep(2, 4))
cluster_list <- hclust_color(all_palettes, n_final = 3)
# make an empty matrix for storing the new palette
wasp_palette <- matrix(NA, ncol = 3, nrow = length(cluster_list))
# for every color in cluster_list...
for (i in 1:length(cluster_list)) {
# get the center indices
idx <- cluster_list[[i]]
# get the average value for each channel, using cluster size to get a weighted average
ctr <- apply(all_palettes, 2,
function(j) weighted.mean(j[idx],
w = all_sizes[idx]))
# store in the palette matrix
wasp_palette[i, ] <- ctr
}
# check that our colors seem reasonable
par(mar = rep(0, 4))
plotColorPalette(wasp_palette)
impose_list <- lapply(imgs, function(i) imposeColors(i, wasp_palette,
adjust_centers = FALSE,
plotting = FALSE))
impose_list <- readRDS("~/Dropbox/color/recolorize_examples/02_wasps/rds_files/recolorize_fits.rds")
# let's look at our palettes and color maps!
layout(matrix(1:40, nrow = 4, byrow = TRUE),
widths = rep(c(0.8, 0.2), 5))
par(mar = c(1, 0, 1, 1))
for (i in impose_list) {
plotImageArray(recoloredImage(i))
plotColorPalette(i$centers, i$sizes, horiz = FALSE)
}
# convert to patternize:
patternize_list <- readRDS("~/Dropbox/color/recolorize_examples/02_wasps/rds_files/patternize_list.rds")
# and set extents again:
for (i in 1:length(patternize_list)) {
for (j in 1:length(patternize_list[[1]])) {
raster::extent(patternize_list[[i]][[j]]) <- extent_list[[i]]
}
}
# convert to patternize:
patternize_list <- readRDS("~/Dropbox/color/recolorize_examples/02_wasps/rds_files/patternize_list.rds")
source("~/Dropbox/color/recolorize_examples/patPCA_total.R")
wasp_pca <- patPCA_total(patternize_list, quietly = FALSE)
# first, make a blank plot
PCx <- 1; PCy <- 2
pca_summary <- summary(wasp_pca)
limits <- apply(wasp_pca$x[ , c(PCx, PCy)], 2, range)
par(mar = c(4, 4, 2, 1))
plot(wasp_pca$x[ , c(PCx, PCy)], type = "n",
asp = 1,
xlim = limits[ , 1] + c(-5, 5),
ylim = limits[ , 2] + c(-10, 10),
xlab=paste0('PC1 (', round(pca_summary$importance[2, PCx]*100, 1), ' %)'),
ylab=paste0('PC2 (', round(pca_summary$importance[2, PCy]*100, 1), ' %)'))
# then add images:
for (i in 1:length(impose_list)) {
add_image(impose_list[[i]]$original_img,
x = wasp_pca$x[i, PCx],
y = wasp_pca$x[i, PCy],
width = 20)
}
par(mar = c(4, 4, 2, 1))
plot(wasp_pca$x[ , c(PCx, PCy)], type = "n",
asp = 1,
xlim = limits[ , 1] + c(-5, 5),
ylim = limits[ , 2] + c(-10, 10),
xlab=paste0('PC1 (', round(pca_summary$importance[2, PCx]*100, 1), ' %)'),
ylab=paste0('PC2 (', round(pca_summary$importance[2, PCy]*100, 1), ' %)'))
# read in images from the original folder:
images <- lapply(dir("~/Dropbox/color/recolorize_examples/02_wasps/original_images/",
full.names = TRUE),
readImage)
# and plot:
for (i in 1:length(images)) {
add_image(images[[i]],
x = wasp_pca$x[i, PCx],
y = wasp_pca$x[i, PCy],
width = 15)
}
blogdown::build_site()
blogdown::serve_site()
