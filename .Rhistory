scatter3D(clusters$L, clusters$a, clusters$b, cex = clusters$Pct)
# Or with plotly
plotClusters(clusters, color.space = "lab")
# Or with plotly
plotClustersMulti(clusters, color.space = "lab", ref.white = "D65")
# Or with plotly
plotClusters(clusters, color.space = "lab", ref.white = "D65")
# Or with plotly
scatter3D(clusters$L, clusters$a, clusters$b, size = 0.5)
# Or with plotly
scatter3D(clusters$L, clusters$a, clusters$b, size = 15)
# Or with plotly
scatter3D(clusters$L, clusters$a, clusters$b, type = "n")
# Or with plotly
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0)
# Or with plotly
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
# Or with plotly
col_vector <- rgb(convertColor(clusters, from = "Lab", to = "sRGB"))
# Or with plotly
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
col_vector
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
for (i in 1:nrow(clusters)) {
scatter3D(clusters$L[i],
clusters$a[i],
clusters$b[i],
cex = clusters$Pct[i], col = col_vector[i])
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# Or with plotly
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i], col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# Or with plotly
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
scale <- 100
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# Or with plotly
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
scale <- 25
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# Or with plotly
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F)
scale <- 50
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# we can also use scatter3D, with a bit of a hack to get different point sizes
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
# make blank plot
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F,
xlab = "L", ylab = "a", zlab = "b")
# set scale multiplier for point sizes
scale <- 50
# add one point at a time, setting size with the cex argument
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# we can also use scatter3D, with a bit of a hack to get different point sizes
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
# make blank plot
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F, phi = 35, theta = 60,
xlab = "L", ylab = "a", zlab = "b")
# set scale multiplier for point sizes
scale <- 50
# add one point at a time, setting size with the cex argument
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab")
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab", ref.white = "D65")
blogdown:::preview_site()
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab", ref.white = "D65")
library(plotly)
library(plotly)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, size = ~Pct)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, sizes = ~Pct)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, size = ~Pct*scale)
blogdown::check_config()
blogdown::check_content()
blogdown::check_site()
blogdown::new_post()
blogdown::new_post("Introduction to `recolorize`")
blogdown::new_post("Function gallery for recolorize")
blogdown::check_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
library(recolorize2)
library(recolorize)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes)
color_palette
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes / sum(rc_object$sizes))
color_palette
order(color_palette)
order(color_palette$size, decreasing = TRUE)
color_palette <- color_palette[order(color_palette$size), ]
color_palette
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes / sum(rc_object$sizes))
color_palette <- color_palette[order(color_palette$size, decreasing = TRUE), ]
color_palette
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::new_content("publication/", kind = "publication/")
blogdown::serve_site()
img <- system.file("extdata/ocellata.png", package = "recolorize")
library(recolorize)
temp <- recolorize(img)
img <- system.file("extdata/ephippegera.png", package = "recolorize")
library(recolorize)
temp <- recolorize(img)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
temp <- recolorize(img)
temp <- recolorize2(img)
plot(temp)
editLayers(temp, operations = "grow")
plot(temp)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::check_site()
blogdown::stop_server()
blogdown::check_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
grDevices::rgb2hsv(255, 74, 171)
grDevices::rgb2hsv(255, 74, 171) * 255
rgb2hsv(255, 74, 171) * 255
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::serve_site()
blogdown::stop_server()
View(clusters)
plot(rc)
library(recolorize)
plot(rc)
blogdown::serve_site()
devtools::install_github("rstudio/blogdown")
blogdown::check_site()
blogdown::check_gitignore()
blogdown::stop_server()
library(recolorize)
img <- system.file("extdata/chongi.png", package = "recolorize")
test <- recolorize2(img, "k", n = 8)
test <- recolorize2(img, "hist", n = 8)
