cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
clusters <- extractClusters(getKMeanColors(img, color.space = "Lab",
ref.white = "D65",
n = 30, plotting = F))
colnames(clusters) <- c("L", "a", "b", "Pct")
# We can do this with a colordistance function...
scatter3dclusters(clusters, color.space = "lab", scaling = 100)
# we can also use scatter3D, with a bit of a hack to get different point sizes
col_vector <- rgb(convertColor(clusters[ , 1:3], from = "Lab", to = "sRGB"))
# make blank plot
scatter3D(clusters$L, clusters$a, clusters$b,
cex = 0, colkey = F, phi = 35, theta = 60,
xlab = "L", ylab = "a", zlab = "b")
# set scale multiplier for point sizes
scale <- 50
# add one point at a time, setting size with the cex argument
for (i in 1:nrow(clusters)) {
scatter3D(x = clusters$L[i],
y = clusters$a[i],
z = clusters$b[i],
cex = clusters$Pct[i] * scale,
pch = 19, alpha = 0.5,
col = col_vector[i], add = TRUE)
}
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab")
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab", ref.white = "D65")
blogdown:::preview_site()
# or, we can just use plotly
plotClusters(clusters, color.space = "Lab", ref.white = "D65")
library(plotly)
library(plotly)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, size = ~Pct)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, sizes = ~Pct)
# or, we can just use plotly again
plot_ly(data = clusters,
x = ~L, y = ~a, z = ~b,
type = "scatter3d", mode = "markers",
color = I(col_vector), # this is a bit of a hack and you'll get a warning...
colors = col_vector, size = ~Pct*scale)
blogdown::check_config()
blogdown::check_content()
blogdown::check_site()
blogdown::new_post()
blogdown::new_post("Introduction to `recolorize`")
blogdown::new_post("Function gallery for recolorize")
blogdown::check_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
library(recolorize2)
library(recolorize)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes)
color_palette
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes / sum(rc_object$sizes))
color_palette
order(color_palette)
order(color_palette$size, decreasing = TRUE)
color_palette <- color_palette[order(color_palette$size), ]
color_palette
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc_object <- recolorize2(img, cutoff = 20)
color_palette <- data.frame(hex = rgb(rc_object$centers),
size = rc_object$sizes / sum(rc_object$sizes))
color_palette <- color_palette[order(color_palette$size, decreasing = TRUE), ]
color_palette
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::new_content("publication/", kind = "publication/")
blogdown::serve_site()
img <- system.file("extdata/ocellata.png", package = "recolorize")
library(recolorize)
temp <- recolorize(img)
img <- system.file("extdata/ephippegera.png", package = "recolorize")
library(recolorize)
temp <- recolorize(img)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
temp <- recolorize(img)
temp <- recolorize2(img)
plot(temp)
editLayers(temp, operations = "grow")
plot(temp)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::check_site()
blogdown::stop_server()
blogdown::check_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
grDevices::rgb2hsv(255, 74, 171)
grDevices::rgb2hsv(255, 74, 171) * 255
rgb2hsv(255, 74, 171) * 255
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::check_site()
blogdown::serve_site()
blogdown::stop_server()
View(clusters)
plot(rc)
library(recolorize)
plot(rc)
blogdown::serve_site()
devtools::install_github("rstudio/blogdown")
blogdown::check_site()
blogdown::check_gitignore()
blogdown::stop_server()
library(recolorize)
img <- system.file("extdata/chongi.png", package = "recolorize")
test <- recolorize2(img, "k", n = 8)
test <- recolorize2(img, "hist", n = 8)
blogdown:::preview_site()
image_tree_save <- function(filename, ...) {
pdf(filename)}
image_tree_save <- function(filename, w, h, ...) {
png(filename, width = w, height = h, bg = "transparent", units = 'in', res = 300)
image_tree(...)
dev.off()}
image_tree_save("cdm_tree.png", 10, 3, tree = tree, image_paths = images)
#' @param tree Object of class "phylo".
#' @param image_paths Vector of paths to images for plotting.
#'   Must be in the same order as the tree tip labels!!
#' @param image_width The width of the image, as a proportion of the
#'   x-axis.
#' @param ... Arguments passed to [ape::plot.phylo], including
#'   `type` (`"fan", "unrooted", "phylogram"`, etc), `show.tip.label`
#'   (logical), etc.
image_tree <- function(tree, image_paths, image_width = 0.1, ...) {
require(ape)
# plot the tree
plot.phylo(tree, ...)
# this is the weird part: we get the phylo plot parameters from the active
# graphics device
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
# get the xy coordinates of the tips
ntip <- lastPP$Ntip
xy <- data.frame(x = lastPP$xx[1:ntip],
y = lastPP$yy[1:ntip])
# scale image width according to plot width
image_width <- diff(range(lastPP$x.lim)) * image_width
# add the images using the add_image function
for (i in 1:length(image_paths)) {
img <- recolorize::readImage(image_paths[i])
add_image(img,
xy[i, 1], xy[i, 2],
width = image_width)
}
}
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE,
angle = 0){
usr <- graphics::par()$usr
pin <- graphics::par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate,
angle = angle)
}
image_tree_save("cdm_tree.png", 10, 3, tree = tree, image_paths = images)
# in my case, I have a folder called 'images' which contains the 40 images,
# so 'images' is a vector of 40 paths
images <- dir("images/", full.names = TRUE)
# generate a distance matrix using all the package defaults
cdm <- imageClusterPipeline(images, sample.size = FALSE)
library(colordistance)
# in my case, I have a folder called 'images' which contains the 40 images,
# so 'images' is a vector of 40 paths
images <- dir("images/", full.names = TRUE)
# generate a distance matrix using all the package defaults
cdm <- imageClusterPipeline(images, sample.size = FALSE)
tree <- ape::nj(as.dist(cdm))
cdm <- imageClusterPipeline(images, sample.size = FALSE, plot.heatmap = F)
images
cdm <- imageClusterPipeline(images, sample.size = FALSE, plot.heatmap = F)
install.packages("blogdown")
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/")
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
library(recolorize)
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
full.names = TRUE)
wasps
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
pattern = "jpg",
full.names = TRUE)
wasps
layout(matrix(1:20, nrow = 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
library(recolorize)
wasps <- dir("~/Dropbox/color/recolorize_examples/wasps/original_images/",
pattern = "jpg",
full.names = TRUE)
wasps
layout(matrix(1:20, nrow = 4))
par(mar = rep(0.5, 4))
for (i in wasps) {
plotImageArray(jpeg::readJPEG(i))
}
?patternize::alignLan
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt")
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt",
col.names = c(X, Y))
read.table("~/Dropbox/color/recolorize_examples/wasps/landmarks/polistes_01_landmarks.txt",
col.names = c("X", "Y"))
blogdown:::preview_site()
# first, make a blank plot
PCx <- 1; PCy <- 2
pca_summary <- summary(wasp_pca)
