recolorize::plotImageArray(recoloredImage(rc_obj),
main = "Output")
plot_region()
}
return(rc_obj)
}
u <- readRDS("u1.rds")
recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow")
recolor_selection2 <- function(rc_obj, u, color_to = 1,
selection = "rect",
locator_color = "red",
n_polygons = 1,
plotting = TRUE,
recolor_background = FALSE) {
# store old map
rc_original_pix <- rc_obj$pixel_assignments
# choose region selection method:
selection <- match.arg(arg = selection, choices = c("rectangle", "polygon"))
# user-select area and change color of pixels inside region of interest
if (selection == "rectangle") {
# store the input
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
# flip the yrange (in the image, y is numbered bottom to top, but in an array
# it's indexed top to bottom)
u$yrange <- dim(img)[1] - u$yrange
# and change pixel assignments to new color
rc_obj$pixel_assignments[u$yrange[1]:u$yrange[2],
u$xrange[1]:u$xrange[2]] <- color_to
} else if (selection == "polygon") {
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
u$bdry <- lapply(u$bdry, \(x) lapply(x, round))
# find all pixels inside of the bounding box for the polygon(s)
xy <- expand.grid(u$xrange[1]:u$xrange[2], u$yrange[1]:u$yrange[2])
# for every polygon...
for (i in 1:length(u$bdry)) {
pol <- u$bdry[[i]]
# find which points in the bounding box fall inside the polygon
if (i == 1) {
col_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
} else {
new_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
col_idx <- rbind(col_idx, new_idx)
}
}
# reverse x/y order, y
col_idx <- as.matrix(col_idx[ , 2:1])
col_idx[,1] <- dim(img)[1] - col_idx[,1]
# and change color
rc_obj$pixel_assignments[col_idx] <- color_to
}
# make sure the background is still transparent
if (!recolor_background) {
rc_obj$pixel_assignments[rc_original_pix == 0] <- 0
}
# if plotting, plot
if (plotting) {
# draw box or polygon around the region that was changed
plot_region <- function() {
xdim <- dim(rc_obj$pixel_assignments)[2]
ydim <- dim(rc_obj$pixel_assignments)[1]
if (selection == "rectangle") {
rect(xleft = u$xrange[1] / xdim, xright = u$xrange[2] / xdim,
ybottom = 1 - u$yrange[1] / ydim, ytop = 1 - u$yrange[2] / ydim,
border = locator_color)
} else {
for (i in 1:length(u$bdry)) {
polygon(u$bdry[[i]]$x / xdim,
u$bdry[[i]]$y / ydim, border = locator_color)
}
}
}
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
# set layout
graphics::layout(matrix(1:3, nrow = 1),
widths = rep(1, 3))
# plot original image
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(rc_obj$original_img,
main = "Recolored original")
plot_region()
# plot old zone map with polygon/rectangle
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(constructImage(rc_original_pix, rc_obj$centers),
main = "Input")
plot_region()
# plot new color map & palette
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(recoloredImage(rc_obj),
main = "Output")
plot_region()
}
}
u <- readRDS("u1.rds")
recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow")
recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow", recolor_background = TRUE)
recolor_selection2 <- function(rc_obj, u, color_to = 1,
selection = "rect",
locator_color = "red",
n_polygons = 1,
plotting = TRUE,
recolor_background = FALSE) {
# store old map
rc_original_pix <- rc_obj$pixel_assignments
# choose region selection method:
selection <- match.arg(arg = selection, choices = c("rectangle", "polygon"))
# user-select area and change color of pixels inside region of interest
if (selection == "rectangle") {
# store the input
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
# flip the yrange (in the image, y is numbered bottom to top, but in an array
# it's indexed top to bottom)
u$yrange <- dim(img)[1] - u$yrange
# and change pixel assignments to new color
rc_obj$pixel_assignments[u$yrange[1]:u$yrange[2],
u$xrange[1]:u$xrange[2]] <- color_to
} else if (selection == "polygon") {
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
u$bdry <- lapply(u$bdry, \(x) lapply(x, round))
# find all pixels inside of the bounding box for the polygon(s)
xy <- expand.grid(u$xrange[1]:u$xrange[2], u$yrange[1]:u$yrange[2])
# for every polygon...
for (i in 1:length(u$bdry)) {
pol <- u$bdry[[i]]
# find which points in the bounding box fall inside the polygon
if (i == 1) {
col_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
} else {
new_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
col_idx <- rbind(col_idx, new_idx)
}
}
# reverse x/y order, y
col_idx <- as.matrix(col_idx[ , 2:1])
col_idx[,1] <- dim(img)[1] - col_idx[,1]
# and change color
rc_obj$pixel_assignments[col_idx] <- color_to
}
# make sure the background is still transparent
if (!recolor_background) {
rc_obj$pixel_assignments[rc_original_pix == 0] <- 0
}
# if plotting, plot
if (plotting) {
# draw box or polygon around the region that was changed
plot_region <- function() {
xdim <- dim(rc_obj$pixel_assignments)[2]
ydim <- dim(rc_obj$pixel_assignments)[1]
if (selection == "rectangle") {
rect(xleft = u$xrange[1] / xdim, xright = u$xrange[2] / xdim,
ybottom = 1 - u$yrange[1] / ydim, ytop = 1 - u$yrange[2] / ydim,
border = locator_color)
} else {
for (i in 1:length(u$bdry)) {
polygon(u$bdry[[i]]$x / xdim,
u$bdry[[i]]$y / ydim, border = locator_color)
}
}
}
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
# set layout
graphics::layout(matrix(1:3, nrow = 1),
widths = rep(1, 3))
# plot original image
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(rc_obj$original_img,
main = "Recolored original")
plot_region()
# plot old zone map with polygon/rectangle
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(constructImage(rc_original_pix, rc_obj$centers),
main = "Input")
plot_region()
# plot new color map & palette
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(recoloredImage(rc_obj),
main = "Output")
plot_region()
}
return(rc_obj)
}
u <- readRDS("u1.rds")
rc3 <- recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow")
rc4 <- recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow", recolor_background = TRUE)
# these are different:
rc$call
rc2$call
# but these are exactly like rc2:
rc3$call
rc4$call
# these are different:
print(rc$call)
print(rc2$call)
# but these are exactly like rc2:
print(rc3$call)
print(rc4$call)
# these are different:
print(rc$call)
message("--")
print(rc2$call)
# but these are exactly like rc2:
print(rc3$call)
print(rc4$call)
# these are different:
print(rc$call)
message("--")
print(rc2$call)
message("--")
# but these are exactly like rc2:
print(rc3$call)
message("--")
print(rc4$call)
message("--")
recolor_selection2 <- function(rc_obj, u, color_to = 1,
selection = "rect",
locator_color = "red",
n_polygons = 1,
plotting = TRUE,
recolor_background = FALSE) {
# store old map
rc_original_pix <- rc_obj$pixel_assignments
# choose region selection method:
selection <- match.arg(arg = selection, choices = c("rectangle", "polygon"))
# user-select area and change color of pixels inside region of interest
if (selection == "rectangle") {
# store the input
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
# flip the yrange (in the image, y is numbered bottom to top, but in an array
# it's indexed top to bottom)
u$yrange <- dim(img)[1] - u$yrange
# and change pixel assignments to new color
rc_obj$pixel_assignments[u$yrange[1]:u$yrange[2],
u$xrange[1]:u$xrange[2]] <- color_to
} else if (selection == "polygon") {
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
u$bdry <- lapply(u$bdry, \(x) lapply(x, round))
# find all pixels inside of the bounding box for the polygon(s)
xy <- expand.grid(u$xrange[1]:u$xrange[2], u$yrange[1]:u$yrange[2])
# for every polygon...
for (i in 1:length(u$bdry)) {
pol <- u$bdry[[i]]
# find which points in the bounding box fall inside the polygon
if (i == 1) {
col_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
} else {
new_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
col_idx <- rbind(col_idx, new_idx)
}
}
# reverse x/y order, y
col_idx <- as.matrix(col_idx[ , 2:1])
col_idx[,1] <- dim(img)[1] - col_idx[,1]
# and change color
rc_obj$pixel_assignments[col_idx] <- color_to
}
# make sure the background is still transparent
if (!recolor_background) {
rc_obj$pixel_assignments[rc_original_pix == 0] <- 0
}
# if plotting, plot
if (plotting) {
# draw box or polygon around the region that was changed
plot_region <- function() {
xdim <- dim(rc_obj$pixel_assignments)[2]
ydim <- dim(rc_obj$pixel_assignments)[1]
if (selection == "rectangle") {
rect(xleft = u$xrange[1] / xdim, xright = u$xrange[2] / xdim,
ybottom = 1 - u$yrange[1] / ydim, ytop = 1 - u$yrange[2] / ydim,
border = locator_color)
} else {
for (i in 1:length(u$bdry)) {
polygon(u$bdry[[i]]$x / xdim,
u$bdry[[i]]$y / ydim, border = locator_color)
}
}
}
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
# set layout
graphics::layout(matrix(1:3, nrow = 1),
widths = rep(1, 3))
# plot original image
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(rc_obj$original_img,
main = "Recolored original")
plot_region()
# plot old zone map with polygon/rectangle
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(constructImage(rc_original_pix, rc_obj$centers),
main = "Input")
plot_region()
# plot new color map & palette
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(recoloredImage(rc_obj),
main = "Output")
plot_region()
}
return(rc_obj)
}
u <- readRDS("u1.rds")
rc3 <- recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow")
recolor_selection2 <- function(rc_obj, u, color_to = 1,
selection = "rect",
locator_color = "red",
n_polygons = 1,
plotting = TRUE,
recolor_background = FALSE) {
# store old map
rc_original_pix <- rc_obj$pixel_assignments
# choose region selection method:
selection <- match.arg(arg = selection, choices = c("rectangle", "polygon"))
# user-select area and change color of pixels inside region of interest
if (selection == "rectangle") {
# store the input
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
# flip the yrange (in the image, y is numbered bottom to top, but in an array
# it's indexed top to bottom)
u$yrange <- dim(img)[1] - u$yrange
# and change pixel assignments to new color
rc_obj$pixel_assignments[u$yrange[1]:u$yrange[2],
u$xrange[1]:u$xrange[2]] <- color_to
} else if (selection == "polygon") {
u$xrange <- round(u$xrange)
u$yrange <- round(u$yrange)
u$bdry <- lapply(u$bdry, \(x) lapply(x, round))
# find all pixels inside of the bounding box for the polygon(s)
xy <- expand.grid(u$xrange[1]:u$xrange[2], u$yrange[1]:u$yrange[2])
# for every polygon...
for (i in 1:length(u$bdry)) {
pol <- u$bdry[[i]]
# find which points in the bounding box fall inside the polygon
if (i == 1) {
col_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
} else {
new_idx <- xy[which(secr::pointsInPolygon(xy, do.call(cbind, pol), logical = T)), ]
col_idx <- rbind(col_idx, new_idx)
}
}
# reverse x/y order, y
col_idx <- as.matrix(col_idx[ , 2:1])
col_idx[,1] <- dim(img)[1] - col_idx[,1]
# and change color
rc_obj$pixel_assignments[col_idx] <- color_to
}
# make sure the background is still transparent
if (!recolor_background) {
rc_obj$pixel_assignments[rc_original_pix == 0] <- 0
}
# if plotting, plot
if (plotting) {
# draw box or polygon around the region that was changed
plot_region <- function() {
xdim <- dim(rc_obj$pixel_assignments)[2]
ydim <- dim(rc_obj$pixel_assignments)[1]
if (selection == "rectangle") {
rect(xleft = u$xrange[1] / xdim, xright = u$xrange[2] / xdim,
ybottom = 1 - u$yrange[1] / ydim, ytop = 1 - u$yrange[2] / ydim,
border = locator_color)
} else {
for (i in 1:length(u$bdry)) {
polygon(u$bdry[[i]]$x / xdim,
u$bdry[[i]]$y / ydim, border = locator_color)
}
}
}
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
# set layout
graphics::layout(matrix(1:3, nrow = 1),
widths = rep(1, 3))
# plot original image
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(rc_obj$original_img,
main = "Recolored original")
plot_region()
# plot old zone map with polygon/rectangle
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(constructImage(rc_original_pix, rc_obj$centers),
main = "Input")
plot_region()
# plot new color map & palette
graphics::par(mar = c(0, 0, 2, 0))
recolorize::plotImageArray(recoloredImage(rc_obj),
main = "Output")
plot_region()
}
return(rc_obj)
}
u <- readRDS("u1.rds")
rc3 <- recolor_selection2(rc2, u, color_to = 2, selection = "polygon", locator_color = "yellow")
blogdown:::serve_site()
angelfish <- readRDS("~/Dropbox/color/recolorize_examples/06_pomacanthus/rds_files/impose_list_5colors.rds")
plot(angelfish$`pom_imp_12-8SL`)
angelfish <- readRDS("~/Dropbox/color/recolorize_examples/06_pomacanthus/rds_files/impose_list_3colors.rds")
plot(angelfish$`pom_imp_12-8SL`)
plot(angelfish$`pom_imp_4-8cmSL`)
angelfish <- readRDS("~/Dropbox/color/recolorize_examples/06_pomacanthus/rds_files/impose_list_5colors.rds")
plot(angelfish$`pom_imp_4-8cmSL`)
plot(angelfish$`pom_imp_9-5cmSL`)
plot(angelfish$`pom_mac_3-5SL`)
angelfish <- "~/Dropbox/color/recolorize_examples/02_angelfish/02_angelfish.R"
angelfish <- "~/Dropbox/color/recolorize_examples/02_angelfish/fish_JRandall.png"
rc <- recolorize(angelfish)
rc <- recolorize(angelfish, bins = 3, cutoff = 60)
rc <- recolorize2(angelfish, bins = 3, cutoff = 60)
rc <- recolorize2(angelfish, bins = 2, cutoff = 45)
img <- readRDS("~/Dropbox/color/recolorize_examples/01_beetles/mniszechii_diffuse.png")
rc <- recolorize2(img, bins = 2, cutoff = 45)
img <- "~/Dropbox/color/recolorize_examples/01_beetles/mniszechii_diffuse.png"
rc <- recolorize2(img, bins = 2, cutoff = 45)
img <- "~/Dropbox/color/recolorize_examples/01_beetles/mniszechii_direct.png"
rc <- recolorize2(img, bins = 2, cutoff = 45)
img <- "~/Dropbox/color/recolorize_examples/01_beetles/mniszechii_diffuse.png"
rc <- recolorize2(img, bins = 3, cutoff = 30)
rc <- recolorize2(img, bins = 3, cutoff = 40)
rc <- recolorize2(img, bins = 3, cutoff = 57)
rc <- recolorize2(img, bins = 3, cutoff = 55)
rc <- recolorize2(img, bins = 3, cutoff = 45)
rc <- recolorize2(img, bins = 3, cutoff = 40)
rc <- recolorize2(img, bins = 3, cutoff = 30)
plot(rc)
rc2 <- mergeLayers(rc, list(c(1, 5),
c(2, 7),
c(3, 4)))
plot(rc)
rc2 <- mergeLayers(rc, list(c(1, 5, 3),
c(2, 7)))
rc2 <- mergeLayers(rc, list(c(1, 4, 5, 3),
c(2, 7)))
rc2 <- mergeLayers(rc, list(c(1, 4, 5),
c(2, 7)))
rc2 <- mergeLayers(rc, list(c(1, 5, 3),
c(2, 7)))
rc2 <- mergeLayers(rc, list(c(1, 5, 3),
c(2, 7),
c(4, 6)))
img <- "~/Dropbox/color/recolorize_examples/OLD/03_snake/snake_DavisRabosky.png"
rc <- recolorize2(img, bins = 3, cutoff = 30)
rc <- recolorize2(img, bins = 3, cutoff = 40)
rc <- recolorize2(img, bins = 3, cutoff = 60)
cols <- rc$centers
rc2 <- rc
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 0.5, 1.2))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 1, 1.2), brightness = c(1, 1.5, 1.1))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 0.8, 1.2), brightness = c(1, 1.2, 1.1))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 0.8, 1.2), brightness = c(1, 1.2, 1.2))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 0.6, 1.2), brightness = c(1, 1.2, 1.2))
plot(rc2)
rc <- recolorize2(img, bins = 5, cutoff = 60)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 1000)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 5000)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 500)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 200)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 100)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 50)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 10)
rc2 <- absorbLayer(rc, 3, size_condition = \(s) s < 20)
rc2 <- rc
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 1.1, 0.6), brightness = c(1, 1.2, 1.2))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 1, 0.55), brightness = c(1, 1.1, 1.2))
plot(rc2)
rc2$centers <- adjust_color(rc$centers, saturation = c(1, 1, 0.55), brightness = c(1, 1.1, 1.1))
plot(rc2)
rc3 <- absorbLayer(rc2, 3, \(s) s <= 100)
rc4 <- recolor_selection(rc3, color_to = 1, selection = "polygon",
locator_color = "yelow", n_polygons = 8)
rc4 <- recolor_selection(rc3, color_to = 1, selection = "polygon",
locator_color = "yellow", n_polygons = 8)
rc3 <- absorbLayer(rc2, 3, \(s) s <= 20)
rc3 <- absorbLayer(rc2, 3, \(s) s <= 10)
rc4 <- recolor_selection(rc3, color_to = 2, selection = "polygon",
locator_color = "yellow", n_polygons = 5)
rc4 <- recolor_selection(rc3, color_to = 1, selection = "polygon",
locator_color = "yellow", n_polygons = 16)
rc5 <- recolor_selection(rc4, color_to = 1, selection = "polygon",
locator_color = "yellow", n_polygons = 16)
library(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown::stop_server()
blogdown:::preview_site()
